// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dca_vault

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawB is the `withdrawB` instruction.
type WithdrawB struct {

	// [0] = [] vault
	//
	// [1] = [] vaultPeriodI
	//
	// [2] = [] vaultPeriodJ
	//
	// [3] = [WRITE] userPosition
	//
	// [4] = [] userPositionNftAccount
	//
	// [5] = [] userPositionNftMint
	//
	// [6] = [WRITE] vaultTokenBAccount
	//
	// [7] = [] vaultTokenBMint
	//
	// [8] = [WRITE] userTokenBAccount
	//
	// [9] = [WRITE, SIGNER] withdrawer
	//
	// [10] = [] tokenProgram
	//
	// [11] = [] associatedTokenProgram
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewWithdrawBInstructionBuilder creates a new `WithdrawB` instruction builder.
func NewWithdrawBInstructionBuilder() *WithdrawB {
	nd := &WithdrawB{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetVaultAccount sets the "vault" account.
func (inst *WithdrawB) SetVaultAccount(vault ag_solanago.PublicKey) *WithdrawB {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(vault)
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *WithdrawB) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetVaultPeriodIAccount sets the "vaultPeriodI" account.
func (inst *WithdrawB) SetVaultPeriodIAccount(vaultPeriodI ag_solanago.PublicKey) *WithdrawB {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(vaultPeriodI)
	return inst
}

// GetVaultPeriodIAccount gets the "vaultPeriodI" account.
func (inst *WithdrawB) GetVaultPeriodIAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetVaultPeriodJAccount sets the "vaultPeriodJ" account.
func (inst *WithdrawB) SetVaultPeriodJAccount(vaultPeriodJ ag_solanago.PublicKey) *WithdrawB {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(vaultPeriodJ)
	return inst
}

// GetVaultPeriodJAccount gets the "vaultPeriodJ" account.
func (inst *WithdrawB) GetVaultPeriodJAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetUserPositionAccount sets the "userPosition" account.
func (inst *WithdrawB) SetUserPositionAccount(userPosition ag_solanago.PublicKey) *WithdrawB {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(userPosition).WRITE()
	return inst
}

// GetUserPositionAccount gets the "userPosition" account.
func (inst *WithdrawB) GetUserPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetUserPositionNftAccountAccount sets the "userPositionNftAccount" account.
func (inst *WithdrawB) SetUserPositionNftAccountAccount(userPositionNftAccount ag_solanago.PublicKey) *WithdrawB {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(userPositionNftAccount)
	return inst
}

// GetUserPositionNftAccountAccount gets the "userPositionNftAccount" account.
func (inst *WithdrawB) GetUserPositionNftAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetUserPositionNftMintAccount sets the "userPositionNftMint" account.
func (inst *WithdrawB) SetUserPositionNftMintAccount(userPositionNftMint ag_solanago.PublicKey) *WithdrawB {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(userPositionNftMint)
	return inst
}

// GetUserPositionNftMintAccount gets the "userPositionNftMint" account.
func (inst *WithdrawB) GetUserPositionNftMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetVaultTokenBAccountAccount sets the "vaultTokenBAccount" account.
func (inst *WithdrawB) SetVaultTokenBAccountAccount(vaultTokenBAccount ag_solanago.PublicKey) *WithdrawB {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(vaultTokenBAccount).WRITE()
	return inst
}

// GetVaultTokenBAccountAccount gets the "vaultTokenBAccount" account.
func (inst *WithdrawB) GetVaultTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

// SetVaultTokenBMintAccount sets the "vaultTokenBMint" account.
func (inst *WithdrawB) SetVaultTokenBMintAccount(vaultTokenBMint ag_solanago.PublicKey) *WithdrawB {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(vaultTokenBMint)
	return inst
}

// GetVaultTokenBMintAccount gets the "vaultTokenBMint" account.
func (inst *WithdrawB) GetVaultTokenBMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7]
}

// SetUserTokenBAccountAccount sets the "userTokenBAccount" account.
func (inst *WithdrawB) SetUserTokenBAccountAccount(userTokenBAccount ag_solanago.PublicKey) *WithdrawB {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(userTokenBAccount).WRITE()
	return inst
}

// GetUserTokenBAccountAccount gets the "userTokenBAccount" account.
func (inst *WithdrawB) GetUserTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[8]
}

// SetWithdrawerAccount sets the "withdrawer" account.
func (inst *WithdrawB) SetWithdrawerAccount(withdrawer ag_solanago.PublicKey) *WithdrawB {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(withdrawer).WRITE().SIGNER()
	return inst
}

// GetWithdrawerAccount gets the "withdrawer" account.
func (inst *WithdrawB) GetWithdrawerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[9]
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *WithdrawB) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *WithdrawB {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *WithdrawB) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[10]
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *WithdrawB) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *WithdrawB {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *WithdrawB) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[11]
}

func (inst WithdrawB) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WithdrawB,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawB) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawB) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.VaultPeriodI is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.VaultPeriodJ is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UserPosition is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.UserPositionNftAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.UserPositionNftMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.VaultTokenBAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.VaultTokenBMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.UserTokenBAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Withdrawer is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
	}
	return nil
}

func (inst *WithdrawB) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawB")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                 vault", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("          vaultPeriodI", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("          vaultPeriodJ", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("          userPosition", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("       userPositionNft", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("   userPositionNftMint", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta("           vaultTokenB", inst.AccountMetaSlice[6]))
						accountsBranch.Child(ag_format.Meta("       vaultTokenBMint", inst.AccountMetaSlice[7]))
						accountsBranch.Child(ag_format.Meta("            userTokenB", inst.AccountMetaSlice[8]))
						accountsBranch.Child(ag_format.Meta("            withdrawer", inst.AccountMetaSlice[9]))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice[10]))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice[11]))
					})
				})
		})
}

func (obj WithdrawB) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *WithdrawB) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewWithdrawBInstruction declares a new WithdrawB instruction with the provided parameters and accounts.
func NewWithdrawBInstruction(
	// Accounts:
	vault ag_solanago.PublicKey,
	vaultPeriodI ag_solanago.PublicKey,
	vaultPeriodJ ag_solanago.PublicKey,
	userPosition ag_solanago.PublicKey,
	userPositionNftAccount ag_solanago.PublicKey,
	userPositionNftMint ag_solanago.PublicKey,
	vaultTokenBAccount ag_solanago.PublicKey,
	vaultTokenBMint ag_solanago.PublicKey,
	userTokenBAccount ag_solanago.PublicKey,
	withdrawer ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey) *WithdrawB {
	return NewWithdrawBInstructionBuilder().
		SetVaultAccount(vault).
		SetVaultPeriodIAccount(vaultPeriodI).
		SetVaultPeriodJAccount(vaultPeriodJ).
		SetUserPositionAccount(userPosition).
		SetUserPositionNftAccountAccount(userPositionNftAccount).
		SetUserPositionNftMintAccount(userPositionNftMint).
		SetVaultTokenBAccountAccount(vaultTokenBAccount).
		SetVaultTokenBMintAccount(vaultTokenBMint).
		SetUserTokenBAccountAccount(userTokenBAccount).
		SetWithdrawerAccount(withdrawer).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram)
}
