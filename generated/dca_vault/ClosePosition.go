// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dca_vault

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ClosePosition is the `closePosition` instruction.
type ClosePosition struct {

	// [0] = [WRITE] vault
	//
	// [1] = [] vaultPeriodI
	//
	// [2] = [] vaultPeriodJ
	//
	// [3] = [WRITE] vaultPeriodUserExpiry
	//
	// [4] = [WRITE] userPosition
	//
	// [5] = [WRITE] vaultTokenAAccount
	//
	// [6] = [WRITE] vaultTokenBAccount
	//
	// [7] = [WRITE] userTokenAAccount
	//
	// [8] = [WRITE] userTokenBAccount
	//
	// [9] = [WRITE] userPositionNftAccount
	//
	// [10] = [] userPositionNftMint
	//
	// [11] = [] tokenAMint
	//
	// [12] = [] tokenBMint
	//
	// [13] = [WRITE, SIGNER] withdrawer
	//
	// [14] = [] tokenProgram
	//
	// [15] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewClosePositionInstructionBuilder creates a new `ClosePosition` instruction builder.
func NewClosePositionInstructionBuilder() *ClosePosition {
	nd := &ClosePosition{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 16),
	}
	return nd
}

// SetVaultAccount sets the "vault" account.
func (inst *ClosePosition) SetVaultAccount(vault ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *ClosePosition) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetVaultPeriodIAccount sets the "vaultPeriodI" account.
func (inst *ClosePosition) SetVaultPeriodIAccount(vaultPeriodI ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(vaultPeriodI)
	return inst
}

// GetVaultPeriodIAccount gets the "vaultPeriodI" account.
func (inst *ClosePosition) GetVaultPeriodIAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetVaultPeriodJAccount sets the "vaultPeriodJ" account.
func (inst *ClosePosition) SetVaultPeriodJAccount(vaultPeriodJ ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(vaultPeriodJ)
	return inst
}

// GetVaultPeriodJAccount gets the "vaultPeriodJ" account.
func (inst *ClosePosition) GetVaultPeriodJAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetVaultPeriodUserExpiryAccount sets the "vaultPeriodUserExpiry" account.
func (inst *ClosePosition) SetVaultPeriodUserExpiryAccount(vaultPeriodUserExpiry ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(vaultPeriodUserExpiry).WRITE()
	return inst
}

// GetVaultPeriodUserExpiryAccount gets the "vaultPeriodUserExpiry" account.
func (inst *ClosePosition) GetVaultPeriodUserExpiryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetUserPositionAccount sets the "userPosition" account.
func (inst *ClosePosition) SetUserPositionAccount(userPosition ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(userPosition).WRITE()
	return inst
}

// GetUserPositionAccount gets the "userPosition" account.
func (inst *ClosePosition) GetUserPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetVaultTokenAAccountAccount sets the "vaultTokenAAccount" account.
func (inst *ClosePosition) SetVaultTokenAAccountAccount(vaultTokenAAccount ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(vaultTokenAAccount).WRITE()
	return inst
}

// GetVaultTokenAAccountAccount gets the "vaultTokenAAccount" account.
func (inst *ClosePosition) GetVaultTokenAAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetVaultTokenBAccountAccount sets the "vaultTokenBAccount" account.
func (inst *ClosePosition) SetVaultTokenBAccountAccount(vaultTokenBAccount ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(vaultTokenBAccount).WRITE()
	return inst
}

// GetVaultTokenBAccountAccount gets the "vaultTokenBAccount" account.
func (inst *ClosePosition) GetVaultTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

// SetUserTokenAAccountAccount sets the "userTokenAAccount" account.
func (inst *ClosePosition) SetUserTokenAAccountAccount(userTokenAAccount ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(userTokenAAccount).WRITE()
	return inst
}

// GetUserTokenAAccountAccount gets the "userTokenAAccount" account.
func (inst *ClosePosition) GetUserTokenAAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7]
}

// SetUserTokenBAccountAccount sets the "userTokenBAccount" account.
func (inst *ClosePosition) SetUserTokenBAccountAccount(userTokenBAccount ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(userTokenBAccount).WRITE()
	return inst
}

// GetUserTokenBAccountAccount gets the "userTokenBAccount" account.
func (inst *ClosePosition) GetUserTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[8]
}

// SetUserPositionNftAccountAccount sets the "userPositionNftAccount" account.
func (inst *ClosePosition) SetUserPositionNftAccountAccount(userPositionNftAccount ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(userPositionNftAccount).WRITE()
	return inst
}

// GetUserPositionNftAccountAccount gets the "userPositionNftAccount" account.
func (inst *ClosePosition) GetUserPositionNftAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[9]
}

// SetUserPositionNftMintAccount sets the "userPositionNftMint" account.
func (inst *ClosePosition) SetUserPositionNftMintAccount(userPositionNftMint ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(userPositionNftMint)
	return inst
}

// GetUserPositionNftMintAccount gets the "userPositionNftMint" account.
func (inst *ClosePosition) GetUserPositionNftMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[10]
}

// SetTokenAMintAccount sets the "tokenAMint" account.
func (inst *ClosePosition) SetTokenAMintAccount(tokenAMint ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenAMint)
	return inst
}

// GetTokenAMintAccount gets the "tokenAMint" account.
func (inst *ClosePosition) GetTokenAMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[11]
}

// SetTokenBMintAccount sets the "tokenBMint" account.
func (inst *ClosePosition) SetTokenBMintAccount(tokenBMint ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tokenBMint)
	return inst
}

// GetTokenBMintAccount gets the "tokenBMint" account.
func (inst *ClosePosition) GetTokenBMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[12]
}

// SetWithdrawerAccount sets the "withdrawer" account.
func (inst *ClosePosition) SetWithdrawerAccount(withdrawer ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(withdrawer).WRITE().SIGNER()
	return inst
}

// GetWithdrawerAccount gets the "withdrawer" account.
func (inst *ClosePosition) GetWithdrawerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[13]
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *ClosePosition) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *ClosePosition) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[14]
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *ClosePosition) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *ClosePosition) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[15]
}

func (inst ClosePosition) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ClosePosition,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ClosePosition) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ClosePosition) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.VaultPeriodI is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.VaultPeriodJ is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.VaultPeriodUserExpiry is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.UserPosition is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.VaultTokenAAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.VaultTokenBAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.UserTokenAAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.UserTokenBAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.UserPositionNftAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.UserPositionNftMint is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenAMint is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TokenBMint is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Withdrawer is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *ClosePosition) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ClosePosition")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=16]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                vault", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("         vaultPeriodI", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("         vaultPeriodJ", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("vaultPeriodUserExpiry", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("         userPosition", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("          vaultTokenA", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta("          vaultTokenB", inst.AccountMetaSlice[6]))
						accountsBranch.Child(ag_format.Meta("           userTokenA", inst.AccountMetaSlice[7]))
						accountsBranch.Child(ag_format.Meta("           userTokenB", inst.AccountMetaSlice[8]))
						accountsBranch.Child(ag_format.Meta("      userPositionNft", inst.AccountMetaSlice[9]))
						accountsBranch.Child(ag_format.Meta("  userPositionNftMint", inst.AccountMetaSlice[10]))
						accountsBranch.Child(ag_format.Meta("           tokenAMint", inst.AccountMetaSlice[11]))
						accountsBranch.Child(ag_format.Meta("           tokenBMint", inst.AccountMetaSlice[12]))
						accountsBranch.Child(ag_format.Meta("           withdrawer", inst.AccountMetaSlice[13]))
						accountsBranch.Child(ag_format.Meta("         tokenProgram", inst.AccountMetaSlice[14]))
						accountsBranch.Child(ag_format.Meta("        systemProgram", inst.AccountMetaSlice[15]))
					})
				})
		})
}

func (obj ClosePosition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *ClosePosition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewClosePositionInstruction declares a new ClosePosition instruction with the provided parameters and accounts.
func NewClosePositionInstruction(
	// Accounts:
	vault ag_solanago.PublicKey,
	vaultPeriodI ag_solanago.PublicKey,
	vaultPeriodJ ag_solanago.PublicKey,
	vaultPeriodUserExpiry ag_solanago.PublicKey,
	userPosition ag_solanago.PublicKey,
	vaultTokenAAccount ag_solanago.PublicKey,
	vaultTokenBAccount ag_solanago.PublicKey,
	userTokenAAccount ag_solanago.PublicKey,
	userTokenBAccount ag_solanago.PublicKey,
	userPositionNftAccount ag_solanago.PublicKey,
	userPositionNftMint ag_solanago.PublicKey,
	tokenAMint ag_solanago.PublicKey,
	tokenBMint ag_solanago.PublicKey,
	withdrawer ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *ClosePosition {
	return NewClosePositionInstructionBuilder().
		SetVaultAccount(vault).
		SetVaultPeriodIAccount(vaultPeriodI).
		SetVaultPeriodJAccount(vaultPeriodJ).
		SetVaultPeriodUserExpiryAccount(vaultPeriodUserExpiry).
		SetUserPositionAccount(userPosition).
		SetVaultTokenAAccountAccount(vaultTokenAAccount).
		SetVaultTokenBAccountAccount(vaultTokenBAccount).
		SetUserTokenAAccountAccount(userTokenAAccount).
		SetUserTokenBAccountAccount(userTokenBAccount).
		SetUserPositionNftAccountAccount(userPositionNftAccount).
		SetUserPositionNftMintAccount(userPositionNftMint).
		SetTokenAMintAccount(tokenAMint).
		SetTokenBMintAccount(tokenBMint).
		SetWithdrawerAccount(withdrawer).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram)
}
