/*
Drip Backend

Drip backend service. All API's have a IP rate limit of 10 requests per second. 

API version: 1.0.0
Contact: mocha@dcaf.so
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package drip

import (
	"encoding/json"
)

// ProtoConfig struct for ProtoConfig
type ProtoConfig struct {
	Pubkey string `json:"pubkey"`
	Granularity string `json:"granularity"`
	TriggerDcaSpread int32 `json:"triggerDcaSpread"`
	BaseWithdrawalSpread int32 `json:"baseWithdrawalSpread"`
}

// NewProtoConfig instantiates a new ProtoConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtoConfig(pubkey string, granularity string, triggerDcaSpread int32, baseWithdrawalSpread int32) *ProtoConfig {
	this := ProtoConfig{}
	this.Pubkey = pubkey
	this.Granularity = granularity
	this.TriggerDcaSpread = triggerDcaSpread
	this.BaseWithdrawalSpread = baseWithdrawalSpread
	return &this
}

// NewProtoConfigWithDefaults instantiates a new ProtoConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtoConfigWithDefaults() *ProtoConfig {
	this := ProtoConfig{}
	return &this
}

// GetPubkey returns the Pubkey field value
func (o *ProtoConfig) GetPubkey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pubkey
}

// GetPubkeyOk returns a tuple with the Pubkey field value
// and a boolean to check if the value has been set.
func (o *ProtoConfig) GetPubkeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pubkey, true
}

// SetPubkey sets field value
func (o *ProtoConfig) SetPubkey(v string) {
	o.Pubkey = v
}

// GetGranularity returns the Granularity field value
func (o *ProtoConfig) GetGranularity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Granularity
}

// GetGranularityOk returns a tuple with the Granularity field value
// and a boolean to check if the value has been set.
func (o *ProtoConfig) GetGranularityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Granularity, true
}

// SetGranularity sets field value
func (o *ProtoConfig) SetGranularity(v string) {
	o.Granularity = v
}

// GetTriggerDcaSpread returns the TriggerDcaSpread field value
func (o *ProtoConfig) GetTriggerDcaSpread() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TriggerDcaSpread
}

// GetTriggerDcaSpreadOk returns a tuple with the TriggerDcaSpread field value
// and a boolean to check if the value has been set.
func (o *ProtoConfig) GetTriggerDcaSpreadOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TriggerDcaSpread, true
}

// SetTriggerDcaSpread sets field value
func (o *ProtoConfig) SetTriggerDcaSpread(v int32) {
	o.TriggerDcaSpread = v
}

// GetBaseWithdrawalSpread returns the BaseWithdrawalSpread field value
func (o *ProtoConfig) GetBaseWithdrawalSpread() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BaseWithdrawalSpread
}

// GetBaseWithdrawalSpreadOk returns a tuple with the BaseWithdrawalSpread field value
// and a boolean to check if the value has been set.
func (o *ProtoConfig) GetBaseWithdrawalSpreadOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseWithdrawalSpread, true
}

// SetBaseWithdrawalSpread sets field value
func (o *ProtoConfig) SetBaseWithdrawalSpread(v int32) {
	o.BaseWithdrawalSpread = v
}

func (o ProtoConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["pubkey"] = o.Pubkey
	}
	if true {
		toSerialize["granularity"] = o.Granularity
	}
	if true {
		toSerialize["triggerDcaSpread"] = o.TriggerDcaSpread
	}
	if true {
		toSerialize["baseWithdrawalSpread"] = o.BaseWithdrawalSpread
	}
	return json.Marshal(toSerialize)
}

type NullableProtoConfig struct {
	value *ProtoConfig
	isSet bool
}

func (v NullableProtoConfig) Get() *ProtoConfig {
	return v.value
}

func (v *NullableProtoConfig) Set(val *ProtoConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableProtoConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableProtoConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtoConfig(val *ProtoConfig) *NullableProtoConfig {
	return &NullableProtoConfig{value: val, isSet: true}
}

func (v NullableProtoConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtoConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


