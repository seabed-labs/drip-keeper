/*
Drip Backend

Drip backend service. All API's have a IP rate limit of 10 requests per second. 

API version: 1.0.0
Contact: mocha@dcaf.so
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package drip

import (
	"encoding/json"
)

// ExpandedAdminVault Internal vault schema.
type ExpandedAdminVault struct {
	Pubkey string `json:"pubkey"`
	ProtoConfig string `json:"protoConfig"`
	TokenAAccount string `json:"tokenAAccount"`
	TokenBAccount string `json:"tokenBAccount"`
	TreasuryTokenBAccount string `json:"treasuryTokenBAccount"`
	TokenAMint string `json:"tokenAMint"`
	TokenBMint string `json:"tokenBMint"`
	LastDcaPeriod string `json:"lastDcaPeriod"`
	DripAmount string `json:"dripAmount"`
	// unix timestamp
	DcaActivationTimestamp string `json:"dcaActivationTimestamp"`
	Enabled bool `json:"enabled"`
	ProtoConfigValue *ProtoConfig `json:"protoConfigValue,omitempty"`
	TokenAMintValue *Token `json:"tokenAMintValue,omitempty"`
	TokenBMintValue *Token `json:"tokenBMintValue,omitempty"`
	TokenAAccountValue *TokenAccountBalance `json:"tokenAAccountValue,omitempty"`
	TokenBAccountValue *TokenAccountBalance `json:"tokenBAccountValue,omitempty"`
	TreasuryTokenBAccountValue *TokenAccountBalance `json:"treasuryTokenBAccountValue,omitempty"`
}

// NewExpandedAdminVault instantiates a new ExpandedAdminVault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpandedAdminVault(pubkey string, protoConfig string, tokenAAccount string, tokenBAccount string, treasuryTokenBAccount string, tokenAMint string, tokenBMint string, lastDcaPeriod string, dripAmount string, dcaActivationTimestamp string, enabled bool) *ExpandedAdminVault {
	this := ExpandedAdminVault{}
	this.Pubkey = pubkey
	this.ProtoConfig = protoConfig
	this.TokenAAccount = tokenAAccount
	this.TokenBAccount = tokenBAccount
	this.TreasuryTokenBAccount = treasuryTokenBAccount
	this.TokenAMint = tokenAMint
	this.TokenBMint = tokenBMint
	this.LastDcaPeriod = lastDcaPeriod
	this.DripAmount = dripAmount
	this.DcaActivationTimestamp = dcaActivationTimestamp
	this.Enabled = enabled
	return &this
}

// NewExpandedAdminVaultWithDefaults instantiates a new ExpandedAdminVault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpandedAdminVaultWithDefaults() *ExpandedAdminVault {
	this := ExpandedAdminVault{}
	return &this
}

// GetPubkey returns the Pubkey field value
func (o *ExpandedAdminVault) GetPubkey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pubkey
}

// GetPubkeyOk returns a tuple with the Pubkey field value
// and a boolean to check if the value has been set.
func (o *ExpandedAdminVault) GetPubkeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pubkey, true
}

// SetPubkey sets field value
func (o *ExpandedAdminVault) SetPubkey(v string) {
	o.Pubkey = v
}

// GetProtoConfig returns the ProtoConfig field value
func (o *ExpandedAdminVault) GetProtoConfig() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProtoConfig
}

// GetProtoConfigOk returns a tuple with the ProtoConfig field value
// and a boolean to check if the value has been set.
func (o *ExpandedAdminVault) GetProtoConfigOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProtoConfig, true
}

// SetProtoConfig sets field value
func (o *ExpandedAdminVault) SetProtoConfig(v string) {
	o.ProtoConfig = v
}

// GetTokenAAccount returns the TokenAAccount field value
func (o *ExpandedAdminVault) GetTokenAAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenAAccount
}

// GetTokenAAccountOk returns a tuple with the TokenAAccount field value
// and a boolean to check if the value has been set.
func (o *ExpandedAdminVault) GetTokenAAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenAAccount, true
}

// SetTokenAAccount sets field value
func (o *ExpandedAdminVault) SetTokenAAccount(v string) {
	o.TokenAAccount = v
}

// GetTokenBAccount returns the TokenBAccount field value
func (o *ExpandedAdminVault) GetTokenBAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenBAccount
}

// GetTokenBAccountOk returns a tuple with the TokenBAccount field value
// and a boolean to check if the value has been set.
func (o *ExpandedAdminVault) GetTokenBAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenBAccount, true
}

// SetTokenBAccount sets field value
func (o *ExpandedAdminVault) SetTokenBAccount(v string) {
	o.TokenBAccount = v
}

// GetTreasuryTokenBAccount returns the TreasuryTokenBAccount field value
func (o *ExpandedAdminVault) GetTreasuryTokenBAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TreasuryTokenBAccount
}

// GetTreasuryTokenBAccountOk returns a tuple with the TreasuryTokenBAccount field value
// and a boolean to check if the value has been set.
func (o *ExpandedAdminVault) GetTreasuryTokenBAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TreasuryTokenBAccount, true
}

// SetTreasuryTokenBAccount sets field value
func (o *ExpandedAdminVault) SetTreasuryTokenBAccount(v string) {
	o.TreasuryTokenBAccount = v
}

// GetTokenAMint returns the TokenAMint field value
func (o *ExpandedAdminVault) GetTokenAMint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenAMint
}

// GetTokenAMintOk returns a tuple with the TokenAMint field value
// and a boolean to check if the value has been set.
func (o *ExpandedAdminVault) GetTokenAMintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenAMint, true
}

// SetTokenAMint sets field value
func (o *ExpandedAdminVault) SetTokenAMint(v string) {
	o.TokenAMint = v
}

// GetTokenBMint returns the TokenBMint field value
func (o *ExpandedAdminVault) GetTokenBMint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenBMint
}

// GetTokenBMintOk returns a tuple with the TokenBMint field value
// and a boolean to check if the value has been set.
func (o *ExpandedAdminVault) GetTokenBMintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenBMint, true
}

// SetTokenBMint sets field value
func (o *ExpandedAdminVault) SetTokenBMint(v string) {
	o.TokenBMint = v
}

// GetLastDcaPeriod returns the LastDcaPeriod field value
func (o *ExpandedAdminVault) GetLastDcaPeriod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastDcaPeriod
}

// GetLastDcaPeriodOk returns a tuple with the LastDcaPeriod field value
// and a boolean to check if the value has been set.
func (o *ExpandedAdminVault) GetLastDcaPeriodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastDcaPeriod, true
}

// SetLastDcaPeriod sets field value
func (o *ExpandedAdminVault) SetLastDcaPeriod(v string) {
	o.LastDcaPeriod = v
}

// GetDripAmount returns the DripAmount field value
func (o *ExpandedAdminVault) GetDripAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DripAmount
}

// GetDripAmountOk returns a tuple with the DripAmount field value
// and a boolean to check if the value has been set.
func (o *ExpandedAdminVault) GetDripAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DripAmount, true
}

// SetDripAmount sets field value
func (o *ExpandedAdminVault) SetDripAmount(v string) {
	o.DripAmount = v
}

// GetDcaActivationTimestamp returns the DcaActivationTimestamp field value
func (o *ExpandedAdminVault) GetDcaActivationTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DcaActivationTimestamp
}

// GetDcaActivationTimestampOk returns a tuple with the DcaActivationTimestamp field value
// and a boolean to check if the value has been set.
func (o *ExpandedAdminVault) GetDcaActivationTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DcaActivationTimestamp, true
}

// SetDcaActivationTimestamp sets field value
func (o *ExpandedAdminVault) SetDcaActivationTimestamp(v string) {
	o.DcaActivationTimestamp = v
}

// GetEnabled returns the Enabled field value
func (o *ExpandedAdminVault) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ExpandedAdminVault) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ExpandedAdminVault) SetEnabled(v bool) {
	o.Enabled = v
}

// GetProtoConfigValue returns the ProtoConfigValue field value if set, zero value otherwise.
func (o *ExpandedAdminVault) GetProtoConfigValue() ProtoConfig {
	if o == nil || o.ProtoConfigValue == nil {
		var ret ProtoConfig
		return ret
	}
	return *o.ProtoConfigValue
}

// GetProtoConfigValueOk returns a tuple with the ProtoConfigValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpandedAdminVault) GetProtoConfigValueOk() (*ProtoConfig, bool) {
	if o == nil || o.ProtoConfigValue == nil {
		return nil, false
	}
	return o.ProtoConfigValue, true
}

// HasProtoConfigValue returns a boolean if a field has been set.
func (o *ExpandedAdminVault) HasProtoConfigValue() bool {
	if o != nil && o.ProtoConfigValue != nil {
		return true
	}

	return false
}

// SetProtoConfigValue gets a reference to the given ProtoConfig and assigns it to the ProtoConfigValue field.
func (o *ExpandedAdminVault) SetProtoConfigValue(v ProtoConfig) {
	o.ProtoConfigValue = &v
}

// GetTokenAMintValue returns the TokenAMintValue field value if set, zero value otherwise.
func (o *ExpandedAdminVault) GetTokenAMintValue() Token {
	if o == nil || o.TokenAMintValue == nil {
		var ret Token
		return ret
	}
	return *o.TokenAMintValue
}

// GetTokenAMintValueOk returns a tuple with the TokenAMintValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpandedAdminVault) GetTokenAMintValueOk() (*Token, bool) {
	if o == nil || o.TokenAMintValue == nil {
		return nil, false
	}
	return o.TokenAMintValue, true
}

// HasTokenAMintValue returns a boolean if a field has been set.
func (o *ExpandedAdminVault) HasTokenAMintValue() bool {
	if o != nil && o.TokenAMintValue != nil {
		return true
	}

	return false
}

// SetTokenAMintValue gets a reference to the given Token and assigns it to the TokenAMintValue field.
func (o *ExpandedAdminVault) SetTokenAMintValue(v Token) {
	o.TokenAMintValue = &v
}

// GetTokenBMintValue returns the TokenBMintValue field value if set, zero value otherwise.
func (o *ExpandedAdminVault) GetTokenBMintValue() Token {
	if o == nil || o.TokenBMintValue == nil {
		var ret Token
		return ret
	}
	return *o.TokenBMintValue
}

// GetTokenBMintValueOk returns a tuple with the TokenBMintValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpandedAdminVault) GetTokenBMintValueOk() (*Token, bool) {
	if o == nil || o.TokenBMintValue == nil {
		return nil, false
	}
	return o.TokenBMintValue, true
}

// HasTokenBMintValue returns a boolean if a field has been set.
func (o *ExpandedAdminVault) HasTokenBMintValue() bool {
	if o != nil && o.TokenBMintValue != nil {
		return true
	}

	return false
}

// SetTokenBMintValue gets a reference to the given Token and assigns it to the TokenBMintValue field.
func (o *ExpandedAdminVault) SetTokenBMintValue(v Token) {
	o.TokenBMintValue = &v
}

// GetTokenAAccountValue returns the TokenAAccountValue field value if set, zero value otherwise.
func (o *ExpandedAdminVault) GetTokenAAccountValue() TokenAccountBalance {
	if o == nil || o.TokenAAccountValue == nil {
		var ret TokenAccountBalance
		return ret
	}
	return *o.TokenAAccountValue
}

// GetTokenAAccountValueOk returns a tuple with the TokenAAccountValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpandedAdminVault) GetTokenAAccountValueOk() (*TokenAccountBalance, bool) {
	if o == nil || o.TokenAAccountValue == nil {
		return nil, false
	}
	return o.TokenAAccountValue, true
}

// HasTokenAAccountValue returns a boolean if a field has been set.
func (o *ExpandedAdminVault) HasTokenAAccountValue() bool {
	if o != nil && o.TokenAAccountValue != nil {
		return true
	}

	return false
}

// SetTokenAAccountValue gets a reference to the given TokenAccountBalance and assigns it to the TokenAAccountValue field.
func (o *ExpandedAdminVault) SetTokenAAccountValue(v TokenAccountBalance) {
	o.TokenAAccountValue = &v
}

// GetTokenBAccountValue returns the TokenBAccountValue field value if set, zero value otherwise.
func (o *ExpandedAdminVault) GetTokenBAccountValue() TokenAccountBalance {
	if o == nil || o.TokenBAccountValue == nil {
		var ret TokenAccountBalance
		return ret
	}
	return *o.TokenBAccountValue
}

// GetTokenBAccountValueOk returns a tuple with the TokenBAccountValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpandedAdminVault) GetTokenBAccountValueOk() (*TokenAccountBalance, bool) {
	if o == nil || o.TokenBAccountValue == nil {
		return nil, false
	}
	return o.TokenBAccountValue, true
}

// HasTokenBAccountValue returns a boolean if a field has been set.
func (o *ExpandedAdminVault) HasTokenBAccountValue() bool {
	if o != nil && o.TokenBAccountValue != nil {
		return true
	}

	return false
}

// SetTokenBAccountValue gets a reference to the given TokenAccountBalance and assigns it to the TokenBAccountValue field.
func (o *ExpandedAdminVault) SetTokenBAccountValue(v TokenAccountBalance) {
	o.TokenBAccountValue = &v
}

// GetTreasuryTokenBAccountValue returns the TreasuryTokenBAccountValue field value if set, zero value otherwise.
func (o *ExpandedAdminVault) GetTreasuryTokenBAccountValue() TokenAccountBalance {
	if o == nil || o.TreasuryTokenBAccountValue == nil {
		var ret TokenAccountBalance
		return ret
	}
	return *o.TreasuryTokenBAccountValue
}

// GetTreasuryTokenBAccountValueOk returns a tuple with the TreasuryTokenBAccountValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpandedAdminVault) GetTreasuryTokenBAccountValueOk() (*TokenAccountBalance, bool) {
	if o == nil || o.TreasuryTokenBAccountValue == nil {
		return nil, false
	}
	return o.TreasuryTokenBAccountValue, true
}

// HasTreasuryTokenBAccountValue returns a boolean if a field has been set.
func (o *ExpandedAdminVault) HasTreasuryTokenBAccountValue() bool {
	if o != nil && o.TreasuryTokenBAccountValue != nil {
		return true
	}

	return false
}

// SetTreasuryTokenBAccountValue gets a reference to the given TokenAccountBalance and assigns it to the TreasuryTokenBAccountValue field.
func (o *ExpandedAdminVault) SetTreasuryTokenBAccountValue(v TokenAccountBalance) {
	o.TreasuryTokenBAccountValue = &v
}

func (o ExpandedAdminVault) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["pubkey"] = o.Pubkey
	}
	if true {
		toSerialize["protoConfig"] = o.ProtoConfig
	}
	if true {
		toSerialize["tokenAAccount"] = o.TokenAAccount
	}
	if true {
		toSerialize["tokenBAccount"] = o.TokenBAccount
	}
	if true {
		toSerialize["treasuryTokenBAccount"] = o.TreasuryTokenBAccount
	}
	if true {
		toSerialize["tokenAMint"] = o.TokenAMint
	}
	if true {
		toSerialize["tokenBMint"] = o.TokenBMint
	}
	if true {
		toSerialize["lastDcaPeriod"] = o.LastDcaPeriod
	}
	if true {
		toSerialize["dripAmount"] = o.DripAmount
	}
	if true {
		toSerialize["dcaActivationTimestamp"] = o.DcaActivationTimestamp
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if o.ProtoConfigValue != nil {
		toSerialize["protoConfigValue"] = o.ProtoConfigValue
	}
	if o.TokenAMintValue != nil {
		toSerialize["tokenAMintValue"] = o.TokenAMintValue
	}
	if o.TokenBMintValue != nil {
		toSerialize["tokenBMintValue"] = o.TokenBMintValue
	}
	if o.TokenAAccountValue != nil {
		toSerialize["tokenAAccountValue"] = o.TokenAAccountValue
	}
	if o.TokenBAccountValue != nil {
		toSerialize["tokenBAccountValue"] = o.TokenBAccountValue
	}
	if o.TreasuryTokenBAccountValue != nil {
		toSerialize["treasuryTokenBAccountValue"] = o.TreasuryTokenBAccountValue
	}
	return json.Marshal(toSerialize)
}

type NullableExpandedAdminVault struct {
	value *ExpandedAdminVault
	isSet bool
}

func (v NullableExpandedAdminVault) Get() *ExpandedAdminVault {
	return v.value
}

func (v *NullableExpandedAdminVault) Set(val *ExpandedAdminVault) {
	v.value = val
	v.isSet = true
}

func (v NullableExpandedAdminVault) IsSet() bool {
	return v.isSet
}

func (v *NullableExpandedAdminVault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpandedAdminVault(val *ExpandedAdminVault) *NullableExpandedAdminVault {
	return &NullableExpandedAdminVault{value: val, isSet: true}
}

func (v NullableExpandedAdminVault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpandedAdminVault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


