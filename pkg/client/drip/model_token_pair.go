/*
Drip Backend

Drip backend service. All API's have a IP rate limit of 10 requests per second. 

API version: 1.0.0
Contact: mocha@dcaf.so
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package drip

import (
	"encoding/json"
)

// TokenPair struct for TokenPair
type TokenPair struct {
	Id string `json:"id"`
	TokenA string `json:"tokenA"`
	TokenB string `json:"tokenB"`
}

// NewTokenPair instantiates a new TokenPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenPair(id string, tokenA string, tokenB string) *TokenPair {
	this := TokenPair{}
	this.Id = id
	this.TokenA = tokenA
	this.TokenB = tokenB
	return &this
}

// NewTokenPairWithDefaults instantiates a new TokenPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenPairWithDefaults() *TokenPair {
	this := TokenPair{}
	return &this
}

// GetId returns the Id field value
func (o *TokenPair) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TokenPair) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TokenPair) SetId(v string) {
	o.Id = v
}

// GetTokenA returns the TokenA field value
func (o *TokenPair) GetTokenA() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenA
}

// GetTokenAOk returns a tuple with the TokenA field value
// and a boolean to check if the value has been set.
func (o *TokenPair) GetTokenAOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenA, true
}

// SetTokenA sets field value
func (o *TokenPair) SetTokenA(v string) {
	o.TokenA = v
}

// GetTokenB returns the TokenB field value
func (o *TokenPair) GetTokenB() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenB
}

// GetTokenBOk returns a tuple with the TokenB field value
// and a boolean to check if the value has been set.
func (o *TokenPair) GetTokenBOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenB, true
}

// SetTokenB sets field value
func (o *TokenPair) SetTokenB(v string) {
	o.TokenB = v
}

func (o TokenPair) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["tokenA"] = o.TokenA
	}
	if true {
		toSerialize["tokenB"] = o.TokenB
	}
	return json.Marshal(toSerialize)
}

type NullableTokenPair struct {
	value *TokenPair
	isSet bool
}

func (v NullableTokenPair) Get() *TokenPair {
	return v.value
}

func (v *NullableTokenPair) Set(val *TokenPair) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenPair) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenPair(val *TokenPair) *NullableTokenPair {
	return &NullableTokenPair{value: val, isSet: true}
}

func (v NullableTokenPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


