/*
Drip Backend

Drip backend service. All API's have a IP rate limit of 10 requests per second. 

API version: 1.0.0
Contact: mocha@dcaf.so
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package drip

import (
	"encoding/json"
)

// TokenSwap struct for TokenSwap
type TokenSwap struct {
	Pubkey string `json:"pubkey"`
	Mint string `json:"mint"`
	Authority string `json:"authority"`
	FeeAccount string `json:"feeAccount"`
	TokenAAccount string `json:"tokenAAccount"`
	TokenBAccount string `json:"tokenBAccount"`
	// token pair reference identifier
	Pair string `json:"pair"`
}

// NewTokenSwap instantiates a new TokenSwap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenSwap(pubkey string, mint string, authority string, feeAccount string, tokenAAccount string, tokenBAccount string, pair string) *TokenSwap {
	this := TokenSwap{}
	this.Pubkey = pubkey
	this.Mint = mint
	this.Authority = authority
	this.FeeAccount = feeAccount
	this.TokenAAccount = tokenAAccount
	this.TokenBAccount = tokenBAccount
	this.Pair = pair
	return &this
}

// NewTokenSwapWithDefaults instantiates a new TokenSwap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenSwapWithDefaults() *TokenSwap {
	this := TokenSwap{}
	return &this
}

// GetPubkey returns the Pubkey field value
func (o *TokenSwap) GetPubkey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pubkey
}

// GetPubkeyOk returns a tuple with the Pubkey field value
// and a boolean to check if the value has been set.
func (o *TokenSwap) GetPubkeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pubkey, true
}

// SetPubkey sets field value
func (o *TokenSwap) SetPubkey(v string) {
	o.Pubkey = v
}

// GetMint returns the Mint field value
func (o *TokenSwap) GetMint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mint
}

// GetMintOk returns a tuple with the Mint field value
// and a boolean to check if the value has been set.
func (o *TokenSwap) GetMintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mint, true
}

// SetMint sets field value
func (o *TokenSwap) SetMint(v string) {
	o.Mint = v
}

// GetAuthority returns the Authority field value
func (o *TokenSwap) GetAuthority() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Authority
}

// GetAuthorityOk returns a tuple with the Authority field value
// and a boolean to check if the value has been set.
func (o *TokenSwap) GetAuthorityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Authority, true
}

// SetAuthority sets field value
func (o *TokenSwap) SetAuthority(v string) {
	o.Authority = v
}

// GetFeeAccount returns the FeeAccount field value
func (o *TokenSwap) GetFeeAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeeAccount
}

// GetFeeAccountOk returns a tuple with the FeeAccount field value
// and a boolean to check if the value has been set.
func (o *TokenSwap) GetFeeAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeAccount, true
}

// SetFeeAccount sets field value
func (o *TokenSwap) SetFeeAccount(v string) {
	o.FeeAccount = v
}

// GetTokenAAccount returns the TokenAAccount field value
func (o *TokenSwap) GetTokenAAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenAAccount
}

// GetTokenAAccountOk returns a tuple with the TokenAAccount field value
// and a boolean to check if the value has been set.
func (o *TokenSwap) GetTokenAAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenAAccount, true
}

// SetTokenAAccount sets field value
func (o *TokenSwap) SetTokenAAccount(v string) {
	o.TokenAAccount = v
}

// GetTokenBAccount returns the TokenBAccount field value
func (o *TokenSwap) GetTokenBAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenBAccount
}

// GetTokenBAccountOk returns a tuple with the TokenBAccount field value
// and a boolean to check if the value has been set.
func (o *TokenSwap) GetTokenBAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenBAccount, true
}

// SetTokenBAccount sets field value
func (o *TokenSwap) SetTokenBAccount(v string) {
	o.TokenBAccount = v
}

// GetPair returns the Pair field value
func (o *TokenSwap) GetPair() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pair
}

// GetPairOk returns a tuple with the Pair field value
// and a boolean to check if the value has been set.
func (o *TokenSwap) GetPairOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pair, true
}

// SetPair sets field value
func (o *TokenSwap) SetPair(v string) {
	o.Pair = v
}

func (o TokenSwap) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["pubkey"] = o.Pubkey
	}
	if true {
		toSerialize["mint"] = o.Mint
	}
	if true {
		toSerialize["authority"] = o.Authority
	}
	if true {
		toSerialize["feeAccount"] = o.FeeAccount
	}
	if true {
		toSerialize["tokenAAccount"] = o.TokenAAccount
	}
	if true {
		toSerialize["tokenBAccount"] = o.TokenBAccount
	}
	if true {
		toSerialize["pair"] = o.Pair
	}
	return json.Marshal(toSerialize)
}

type NullableTokenSwap struct {
	value *TokenSwap
	isSet bool
}

func (v NullableTokenSwap) Get() *TokenSwap {
	return v.value
}

func (v *NullableTokenSwap) Set(val *TokenSwap) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenSwap) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenSwap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenSwap(val *TokenSwap) *NullableTokenSwap {
	return &NullableTokenSwap{value: val, isSet: true}
}

func (v NullableTokenSwap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenSwap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


