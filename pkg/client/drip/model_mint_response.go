/*
Drip Backend

Drip backend service. All API's have a IP rate limit of 10 requests per second. 

API version: 1.0.0
Contact: mocha@dcaf.so
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package drip

import (
	"encoding/json"
)

// MintResponse struct for MintResponse
type MintResponse struct {
	TxHash string `json:"txHash"`
}

// NewMintResponse instantiates a new MintResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMintResponse(txHash string) *MintResponse {
	this := MintResponse{}
	this.TxHash = txHash
	return &this
}

// NewMintResponseWithDefaults instantiates a new MintResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMintResponseWithDefaults() *MintResponse {
	this := MintResponse{}
	return &this
}

// GetTxHash returns the TxHash field value
func (o *MintResponse) GetTxHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxHash
}

// GetTxHashOk returns a tuple with the TxHash field value
// and a boolean to check if the value has been set.
func (o *MintResponse) GetTxHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxHash, true
}

// SetTxHash sets field value
func (o *MintResponse) SetTxHash(v string) {
	o.TxHash = v
}

func (o MintResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["txHash"] = o.TxHash
	}
	return json.Marshal(toSerialize)
}

type NullableMintResponse struct {
	value *MintResponse
	isSet bool
}

func (v NullableMintResponse) Get() *MintResponse {
	return v.value
}

func (v *NullableMintResponse) Set(val *MintResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMintResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMintResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMintResponse(val *MintResponse) *NullableMintResponse {
	return &NullableMintResponse{value: val, isSet: true}
}

func (v NullableMintResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMintResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


