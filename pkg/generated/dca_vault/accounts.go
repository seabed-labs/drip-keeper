// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dca_vault

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Vault struct {
	ProtoConfig   ag_solanago.PublicKey
	TokenAMint    ag_solanago.PublicKey
	TokenBMint    ag_solanago.PublicKey
	TokenAAccount ag_solanago.PublicKey
	TokenBAccount ag_solanago.PublicKey
}

var VaultDiscriminator = [8]byte{211, 8, 232, 43, 2, 152, 117, 119}

func (obj Vault) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(VaultDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ProtoConfig` param:
	err = encoder.Encode(obj.ProtoConfig)
	if err != nil {
		return err
	}
	// Serialize `TokenAMint` param:
	err = encoder.Encode(obj.TokenAMint)
	if err != nil {
		return err
	}
	// Serialize `TokenBMint` param:
	err = encoder.Encode(obj.TokenBMint)
	if err != nil {
		return err
	}
	// Serialize `TokenAAccount` param:
	err = encoder.Encode(obj.TokenAAccount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAccount` param:
	err = encoder.Encode(obj.TokenBAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Vault) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(VaultDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[211 8 232 43 2 152 117 119]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ProtoConfig`:
	err = decoder.Decode(&obj.ProtoConfig)
	if err != nil {
		return err
	}
	// Deserialize `TokenAMint`:
	err = decoder.Decode(&obj.TokenAMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenBMint`:
	err = decoder.Decode(&obj.TokenBMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAccount`:
	err = decoder.Decode(&obj.TokenAAccount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAccount`:
	err = decoder.Decode(&obj.TokenBAccount)
	if err != nil {
		return err
	}
	return nil
}

type VaultProtoConfig struct {
	Granularity uint64
}

var VaultProtoConfigDiscriminator = [8]byte{173, 22, 36, 165, 190, 3, 142, 199}

func (obj VaultProtoConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(VaultProtoConfigDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Granularity` param:
	err = encoder.Encode(obj.Granularity)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VaultProtoConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(VaultProtoConfigDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[173 22 36 165 190 3 142 199]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Granularity`:
	err = decoder.Decode(&obj.Granularity)
	if err != nil {
		return err
	}
	return nil
}
