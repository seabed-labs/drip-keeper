// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dca_vault

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawA is the `withdrawA` instruction.
type WithdrawA struct {
	PositionId *uint8
	Amount     *uint64

	// [0] = [SIGNER] withdrawer
	//
	// [1] = [WRITE] vault
	//
	// [2] = [WRITE] depositorTokenAAccount
	//
	// [3] = [] tokenAMint
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewWithdrawAInstructionBuilder creates a new `WithdrawA` instruction builder.
func NewWithdrawAInstructionBuilder() *WithdrawA {
	nd := &WithdrawA{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetPositionId sets the "positionId" parameter.
func (inst *WithdrawA) SetPositionId(positionId uint8) *WithdrawA {
	inst.PositionId = &positionId
	return inst
}

// SetAmount sets the "amount" parameter.
func (inst *WithdrawA) SetAmount(amount uint64) *WithdrawA {
	inst.Amount = &amount
	return inst
}

// SetWithdrawerAccount sets the "withdrawer" account.
func (inst *WithdrawA) SetWithdrawerAccount(withdrawer ag_solanago.PublicKey) *WithdrawA {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(withdrawer).SIGNER()
	return inst
}

// GetWithdrawerAccount gets the "withdrawer" account.
func (inst *WithdrawA) GetWithdrawerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetVaultAccount sets the "vault" account.
func (inst *WithdrawA) SetVaultAccount(vault ag_solanago.PublicKey) *WithdrawA {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *WithdrawA) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetDepositorTokenAAccountAccount sets the "depositorTokenAAccount" account.
func (inst *WithdrawA) SetDepositorTokenAAccountAccount(depositorTokenAAccount ag_solanago.PublicKey) *WithdrawA {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(depositorTokenAAccount).WRITE()
	return inst
}

// GetDepositorTokenAAccountAccount gets the "depositorTokenAAccount" account.
func (inst *WithdrawA) GetDepositorTokenAAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetTokenAMintAccount sets the "tokenAMint" account.
func (inst *WithdrawA) SetTokenAMintAccount(tokenAMint ag_solanago.PublicKey) *WithdrawA {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenAMint)
	return inst
}

// GetTokenAMintAccount gets the "tokenAMint" account.
func (inst *WithdrawA) GetTokenAMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

func (inst WithdrawA) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WithdrawA,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawA) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawA) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.PositionId == nil {
			return errors.New("PositionId parameter is not set")
		}
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Withdrawer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.DepositorTokenAAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenAMint is not set")
		}
	}
	return nil
}

func (inst *WithdrawA) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawA")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("PositionId", *inst.PositionId))
						paramsBranch.Child(ag_format.Param("    Amount", *inst.Amount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     withdrawer", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("          vault", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("depositorTokenA", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("     tokenAMint", inst.AccountMetaSlice[3]))
					})
				})
		})
}

func (obj WithdrawA) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PositionId` param:
	err = encoder.Encode(obj.PositionId)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *WithdrawA) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PositionId`:
	err = decoder.Decode(&obj.PositionId)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

// NewWithdrawAInstruction declares a new WithdrawA instruction with the provided parameters and accounts.
func NewWithdrawAInstruction(
	// Parameters:
	positionId uint8,
	amount uint64,
	// Accounts:
	withdrawer ag_solanago.PublicKey,
	vault ag_solanago.PublicKey,
	depositorTokenAAccount ag_solanago.PublicKey,
	tokenAMint ag_solanago.PublicKey) *WithdrawA {
	return NewWithdrawAInstructionBuilder().
		SetPositionId(positionId).
		SetAmount(amount).
		SetWithdrawerAccount(withdrawer).
		SetVaultAccount(vault).
		SetDepositorTokenAAccountAccount(depositorTokenAAccount).
		SetTokenAMintAccount(tokenAMint)
}
