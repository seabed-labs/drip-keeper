// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dca_vault

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ClosePosition is the `closePosition` instruction.
type ClosePosition struct {

	// [0] = [SIGNER] client
	//
	// [1] = [WRITE] vault
	//
	// [2] = [WRITE] depositorTokenAAccount
	//
	// [3] = [] tokenAMint
	//
	// [4] = [WRITE] depositorTokenBAccount
	//
	// [5] = [] tokenBMint
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewClosePositionInstructionBuilder creates a new `ClosePosition` instruction builder.
func NewClosePositionInstructionBuilder() *ClosePosition {
	nd := &ClosePosition{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetClientAccount sets the "client" account.
func (inst *ClosePosition) SetClientAccount(client ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(client).SIGNER()
	return inst
}

// GetClientAccount gets the "client" account.
func (inst *ClosePosition) GetClientAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetVaultAccount sets the "vault" account.
func (inst *ClosePosition) SetVaultAccount(vault ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *ClosePosition) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetDepositorTokenAAccountAccount sets the "depositorTokenAAccount" account.
func (inst *ClosePosition) SetDepositorTokenAAccountAccount(depositorTokenAAccount ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(depositorTokenAAccount).WRITE()
	return inst
}

// GetDepositorTokenAAccountAccount gets the "depositorTokenAAccount" account.
func (inst *ClosePosition) GetDepositorTokenAAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetTokenAMintAccount sets the "tokenAMint" account.
func (inst *ClosePosition) SetTokenAMintAccount(tokenAMint ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenAMint)
	return inst
}

// GetTokenAMintAccount gets the "tokenAMint" account.
func (inst *ClosePosition) GetTokenAMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetDepositorTokenBAccountAccount sets the "depositorTokenBAccount" account.
func (inst *ClosePosition) SetDepositorTokenBAccountAccount(depositorTokenBAccount ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(depositorTokenBAccount).WRITE()
	return inst
}

// GetDepositorTokenBAccountAccount gets the "depositorTokenBAccount" account.
func (inst *ClosePosition) GetDepositorTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetTokenBMintAccount sets the "tokenBMint" account.
func (inst *ClosePosition) SetTokenBMintAccount(tokenBMint ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenBMint)
	return inst
}

// GetTokenBMintAccount gets the "tokenBMint" account.
func (inst *ClosePosition) GetTokenBMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

func (inst ClosePosition) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ClosePosition,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ClosePosition) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ClosePosition) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Client is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.DepositorTokenAAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenAMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.DepositorTokenBAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenBMint is not set")
		}
	}
	return nil
}

func (inst *ClosePosition) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ClosePosition")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         client", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("          vault", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("depositorTokenA", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("     tokenAMint", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("depositorTokenB", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("     tokenBMint", inst.AccountMetaSlice[5]))
					})
				})
		})
}

func (obj ClosePosition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *ClosePosition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewClosePositionInstruction declares a new ClosePosition instruction with the provided parameters and accounts.
func NewClosePositionInstruction(
	// Accounts:
	client ag_solanago.PublicKey,
	vault ag_solanago.PublicKey,
	depositorTokenAAccount ag_solanago.PublicKey,
	tokenAMint ag_solanago.PublicKey,
	depositorTokenBAccount ag_solanago.PublicKey,
	tokenBMint ag_solanago.PublicKey) *ClosePosition {
	return NewClosePositionInstructionBuilder().
		SetClientAccount(client).
		SetVaultAccount(vault).
		SetDepositorTokenAAccountAccount(depositorTokenAAccount).
		SetTokenAMintAccount(tokenAMint).
		SetDepositorTokenBAccountAccount(depositorTokenBAccount).
		SetTokenBMintAccount(tokenBMint)
}
