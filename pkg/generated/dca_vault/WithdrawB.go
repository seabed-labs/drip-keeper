// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dca_vault

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawB is the `withdrawB` instruction.
type WithdrawB struct {
	PositionId *uint8
	Amount     *uint64

	// [0] = [SIGNER] withdrawer
	//
	// [1] = [WRITE] vault
	//
	// [2] = [WRITE] depositorTokenBAccount
	//
	// [3] = [] tokenBMint
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewWithdrawBInstructionBuilder creates a new `WithdrawB` instruction builder.
func NewWithdrawBInstructionBuilder() *WithdrawB {
	nd := &WithdrawB{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetPositionId sets the "positionId" parameter.
func (inst *WithdrawB) SetPositionId(positionId uint8) *WithdrawB {
	inst.PositionId = &positionId
	return inst
}

// SetAmount sets the "amount" parameter.
func (inst *WithdrawB) SetAmount(amount uint64) *WithdrawB {
	inst.Amount = &amount
	return inst
}

// SetWithdrawerAccount sets the "withdrawer" account.
func (inst *WithdrawB) SetWithdrawerAccount(withdrawer ag_solanago.PublicKey) *WithdrawB {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(withdrawer).SIGNER()
	return inst
}

// GetWithdrawerAccount gets the "withdrawer" account.
func (inst *WithdrawB) GetWithdrawerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetVaultAccount sets the "vault" account.
func (inst *WithdrawB) SetVaultAccount(vault ag_solanago.PublicKey) *WithdrawB {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *WithdrawB) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetDepositorTokenBAccountAccount sets the "depositorTokenBAccount" account.
func (inst *WithdrawB) SetDepositorTokenBAccountAccount(depositorTokenBAccount ag_solanago.PublicKey) *WithdrawB {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(depositorTokenBAccount).WRITE()
	return inst
}

// GetDepositorTokenBAccountAccount gets the "depositorTokenBAccount" account.
func (inst *WithdrawB) GetDepositorTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetTokenBMintAccount sets the "tokenBMint" account.
func (inst *WithdrawB) SetTokenBMintAccount(tokenBMint ag_solanago.PublicKey) *WithdrawB {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenBMint)
	return inst
}

// GetTokenBMintAccount gets the "tokenBMint" account.
func (inst *WithdrawB) GetTokenBMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

func (inst WithdrawB) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WithdrawB,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawB) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawB) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.PositionId == nil {
			return errors.New("PositionId parameter is not set")
		}
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Withdrawer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.DepositorTokenBAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenBMint is not set")
		}
	}
	return nil
}

func (inst *WithdrawB) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawB")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("PositionId", *inst.PositionId))
						paramsBranch.Child(ag_format.Param("    Amount", *inst.Amount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     withdrawer", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("          vault", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("depositorTokenB", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("     tokenBMint", inst.AccountMetaSlice[3]))
					})
				})
		})
}

func (obj WithdrawB) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PositionId` param:
	err = encoder.Encode(obj.PositionId)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *WithdrawB) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PositionId`:
	err = decoder.Decode(&obj.PositionId)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

// NewWithdrawBInstruction declares a new WithdrawB instruction with the provided parameters and accounts.
func NewWithdrawBInstruction(
	// Parameters:
	positionId uint8,
	amount uint64,
	// Accounts:
	withdrawer ag_solanago.PublicKey,
	vault ag_solanago.PublicKey,
	depositorTokenBAccount ag_solanago.PublicKey,
	tokenBMint ag_solanago.PublicKey) *WithdrawB {
	return NewWithdrawBInstructionBuilder().
		SetPositionId(positionId).
		SetAmount(amount).
		SetWithdrawerAccount(withdrawer).
		SetVaultAccount(vault).
		SetDepositorTokenBAccountAccount(depositorTokenBAccount).
		SetTokenBMintAccount(tokenBMint)
}
